Pre release:
- Add "owns_memory_" field to Matrix, Vector, to signify if data should be freed
 * Or plotting of new "view" structures, where one can set data pointers without ownership
 * MatrixBase and VectorBase to have all operations, and own T* data, size, num_rows, num_cols
- Generic "buffer" class that can be used to send Line3D, Triangles, etc.
- Verify that image is not mirrored
- Support no properties for C functions: https://stackoverflow.com/questions/5891221/variadic-macros-with-zero-arguments
- Change void drawPlaneXY etc. interfaces to match between languages (C implementation is correct)
- Unify function names in interfaces, allow for different names between interfaces, e.g. C interface will probably have separate 2D/3D functions
- Refactor/clean up window/tabs/plot elements system
- Add "holdClear" that only clears when new data comes in, to avoid flashing
- Remove need to always specify num_elements
- Function "view" is the one that sets/creates the current element
  view("ViewName"), view("ViewName", "FigureName"), where FigureName can be "main" to indicate the main window
- Set point size before rendering text (it gets affected by setting point size in a plot) (not relevant anymore I think)
- Check if "fillBuffer(&(data_blob[idx]), other_elements...);" can be used as "fillBuffer(&(data_blob[idx]), first_element, other_elements...);"
- Rename "FunctionHeader" to "TransmissionHeader" and "FunctionHeaderObject" to "TransmissionHeaderObject"
- Rename PlotWindowGLPane to PlotCanvas, or GLPlotCanvas, or PlotPane (probably unecessary to include "GL" in name)
- Mark all properties classes constructors explicit (and noexcept?)
- Change to google logging
- Refactor legend properties with colormap pointer
- FunctionHeader should add look up table for added objects, so no map search is necessary on the receiver side
- Add pan and zoom to scroll click and right click
- Delete gl buffers with "glDeleteBuffers"
- Set color in fragment shader with uniform, instead of in vertex shader
- Finalize small quirks in plot
- Implement new shader stuff that's in plot for plot3
- Change plot-LINE_STRIP to separate function, lineCollection, lineSet or something like that
- Replace old c type arrays with std::array
- Reducing number of axis numbers depending on rotation
- Replace use of dynamic matrices/vector with MatrixFixed/VectorFixed with templated size, since most uses can be static (in dvs gui)
- Change "cols" and "rows" to "numCols" and "numRows" for ImageC1/3 and Matrix
- Making sure that view and axes are set properly when not explicitly setting them
  - Behaviour when plotting when no configuration is set
- Fix layout designer
- Fix number formatting and grid vectors system
- Fix showing correct plot walls when in perspective mode
- Unify MouseActivity and InteractionType
- Fix panning "speed"
- Make font smaller, fewer line points per axis
- Make sure all dynamic data is released in plot objects
- Release all textures, VBOs/VAOs in plot objects
- Refactor pipeline of how new plot objects are added
- Implement findMinMax for matrices and vectors
- Add option to setCurrentElement or something, that forces one to call a function "flush" or something, once everything should be plotted, thus eliminating need for Refresh() after every operation, which could improve speed
- Make sure plot/plot3 works for integer data types
- Change types from float to double, to increase precision
- "Arrow edge" size gets bigger with longer arrows, show shouldn't be the case
- Change Bound2/3D to actually be a bound, now it's a vector, and to get a bound you use std::pair<Bound2D, Bound2D>, which isn't ideal
- Make proper test folder structure
- Switch cache reader to configuration_agent
- Matrix/vector/image view for setting data in plot object: img_c1_.setInternalData(nullptr, 0, 0);  // Hack
- Receive and push new data until there is new data available, and refresh only after last update
- "dims_ = hdr.get(FunctionHeaderObjectType::DIMENSION_2D).as<internal::Dimension2D>();", Possible remove need for specifying type and enum?
- Don't always update on keypress?
- Investigate why axes_limits_ is half of what the axes show (probably due to doubling the values in generateGridVectors)
- "UInt8View" or something for "void fillBufferWithData(uint8_t* const buffer) const;" functions, that contains pointer and size
- LegendProperties to use reference_wrapper instead of pointer to colormap
- Gradient min/max (like for surf) for draw mesh and other 3d functions 
- Change all functions to accept "View" types, and then have constructor of VectorView from Vector, MatrixView from Matrix etc
- Time date axis
- Separate plot types so that shader switching is minimized

Post release:
- Bar plot
- Default layout templates with simple names and ex 2x2 plots, 3x3 plots etc
- Create data structure to store properties in, instead of having to specify everything in function call to "plot" etc. i.e. "plot(x, y, props)"
- Contour plotting function
- setCurrentElement doesn''t send any information to dvs, only sets internal variable on client side which is sent with the next command
  - This way, a property type could be added, so that the current element can be specified in the function call
- The class Properties should be moved so that it is not included in the C++ client interface.
- Create another class called something like HeaderPayload, that separates values (angle, axis bounds etc) from flags?
- Logarithmic axes xyz
- Unify some compatible shaders to one big shader with switch case
- More general plot interface with "templated templates": plot(const VectorType<T>& x, ...), where VectorType itself is a template, or use VectorView
- Edge and Facecolor transparent
- Fix so that one can set axis square and axis equal
- Nice looking buttons in interface
- Ability to add button to gui
- quiver3
- Ability to set FOV
- Show plot walls differently if perspective projection
- Programatically specify plots in different windows
- Command line window that outputs errors and warnings
 - Possibility to manipulate plots and windows using this command line interface
- Characters turning away from plot box when rotating
- 3D world
- http://www.opengl.org/wiki/Buffer_Object_Streaming
- Dashed line for plot and plot3

Unsure:
- Command line window that prints errors etc.
- Set order in which different types are plotted
