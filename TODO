Pre release:
- Remove tray icon and bring back old menu (But check how it works for Windows/Linux first, with windowless application)
- Generic "buffer" class that can be used to send Line3D, Triangles, etc.
- Support no properties for C functions: https://stackoverflow.com/questions/5891221/variadic-macros-with-zero-arguments
- Change void drawPlaneXY etc. interfaces to match between languages (C implementation is correct)
- Unify function names in interfaces, allow for different names between interfaces, e.g. C interface will probably have separate 2D/3D functions
- Refactor/clean up window/tabs/plot elements system
- Remove need to always specify num_elements
- Function "view" is the one that sets/creates the current element
  view("ViewName"), view("ViewName", "FigureName"), where FigureName can be "main" to indicate the main window
- Check if "fillBuffer(&(data_blob[idx]), other_elements...);" can be used as "fillBuffer(&(data_blob[idx]), first_element, other_elements...);"
- Add MatrixFixed and VectorFixed
 * Finalize MatrixFixed functions
 * Use MatrixFixed instead of Matrix where possible
 * Add VectorFixed
- Display element name in plot panes
- Add zoom/rotate/pan symbol in upper left corner of the plot pane which the mouse is hoovering over, and symbol for locked rotation/zoom/pan axis
- Help pane that shows up with keyboard shortcuts when you hold 'H'
- Add rendering of plot pane name
- Use weak_ptr for current_gui_element_?
- Investigate if main_window can be just a wxObject or something
- Hide dock icon https://stackoverflow.com/questions/620841/how-to-hide-the-dock-icon
- Mark all properties classes constructors explicit (and noexcept?)
- Refactor legend properties with colormap pointer
- Add background colors to json project file
- use switch()case for plot2d/plot3d shaders, and for colormap functions
- Use T* data = reinterpret_cast<const T* const>(&(input_data[idx_10])); directly in converter functions, like in Plot2D's convert function
- Add pan and zoom to scroll click and right click + Ctrl (left click without Ctrl will always be according to zoom/rotate/pan state, but left click + Ctrl will always be rotate)
- Image view (same level as plot pane) which is zoomable and panable only
- Delete gl buffers with "glDeleteBuffers"
- Set color in fragment shader with uniform, instead of in vertex shader
- Real time plot with option to add new samples
 * And extended functionality to add multiple slots in same function call
- Make all plot objects updatable with a flag "UPDATABLE", so that new data can be submitted to the same object without new allocation
- Reducing number of axis numbers depending on rotation
- Replace use of dynamic matrices/vector with MatrixFixed/VectorFixed with templated size, since most uses can be static (in dvs gui)
- Making sure that view and axes are set properly when not explicitly setting them
  - Behaviour when plotting when no configuration is set
- Fix number formatting and grid vectors system
- Fix platform macros (PLATFORM_APPLE_M etc) needing separate #ifdef statements
- Create demos application
- Demos:
 * Something for mathematicians (klein bottle, torus turning inside out)
 * Something for machine learning practitioners
 * Something with autonomous driving data
 * Something with drone simulation data
 * Somethin with robotics
 * Wave equation
 * Physics simulation (bouncy ball)
- Make font smaller, fewer line points per axis
- Make sure all dynamic data is released in plot objects
- Release all textures, VBOs/VAOs in plot objects
- Refactor pipeline of how new plot objects are added
- Refactor from top down, from the app and down into the GUI
- Add option to setCurrentElement or something, that forces one to call a function "flush" or something, once everything should be plotted, thus eliminating need for Refresh() after every operation, which could improve speed
- Make sure plot/plot3 works for integer data types
- "Arrow edge" size gets bigger with longer arrows, show shouldn't be the case
- Make proper test folder structure
- Receive and push new data until there is new data available, and refresh only after last update
- Don't always update on keypress?
- Investigate why axes_limits_ is half of what the axes show (probably due to doubling the values in generateGridVectors)
- Apply 'applyConverter' to all functions (like in Plot2D/Plot3D)
- LegendProperties to use reference_wrapper instead of pointer to colormap
- Time date axis
- Do something better/neater than "fillBufferWithData"?
- Separate plot object vectors so that shader switching is minimized
- Don't iterate over map in tests.h, just index with the key directly, for basic-tests-cpp
- Zoom with rect only if certain button is pressed
- Solve all TODOs

Post release:
- Bar plot
- Change to google logging
- What to do if two adjecent points are at the same pos for plot/plot3
- Plot functions with VectorView and MatrixView
- Replace old c type arrays with std::array
- Change opengl types from float to double, to increase precision
  - https://stackoverflow.com/questions/28014864/why-do-different-variations-of-glvertexattribpointer-exist
  - https://stackoverflow.com/questions/62292163/opengl-pass-integer-array-with-gl-array-buffer
- Fix showing correct plot walls when in perspective mode
- Default layout templates with simple names and ex 2x2 plots, 3x3 plots etc
- Create data structure to store properties in, instead of having to specify everything in function call to "plot" etc. i.e. "plot(x, y, props)"
- Contour plotting function
- setCurrentElement doesn''t send any information to dvs, only sets internal variable on client side which is sent with the next command
  - This way, a property type could be added, so that the current element can be specified in the function call
- Create another class called something like HeaderPayload, that separates values (angle, axis bounds etc) from flags?
- Logarithmic axes xyz
- MatrixBase and VectorBase to have all operations, and own T* data, size, num_rows, num_cols
- Unify some compatible shaders to one big shader with switch case
- Edge and Facecolor transparent
- Fix so that one can set axis square and axis equal
- Nice looking buttons in interface
- Ability to add button to gui
- quiver3
- Ability to set FOV
- Show plot walls differently if perspective projection
- Programatically specify plots in different windows
- Command line window that outputs errors and warnings
 - Possibility to manipulate plots and windows using this command line interface
- Characters turning away from plot box when rotating
- 3D world
- http://www.opengl.org/wiki/Buffer_Object_Streaming
- Dashed line for plot and plot3
- Change all relevant functions to accept "View" types
- Implement findMinMax for matrices and vectors

Unsure:
- Command line window that prints errors etc.
- Set order in which different types are plotted
