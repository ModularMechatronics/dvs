Pre release:
- Remove tray icon and bring back old menu (But check how it works for Windows/Linux first, with windowless application)
- Fix number formatting and grid vectors system (1.0, 1e10, -0.24234, -2.7345e2)
- Support for Windows and Linux
- Add all keybindings to the help pane
- Delete element for slider (and probably other gui elements) doesn't work
- Clean up and sanitize CMakeLists.txt files, so that they are "neat"
- Finish python interface (and delete old C++ reference code in duoplot.py)
- Adding a slider with the wrong aspect ratio of the window still gives crap result, with a vertical slider
  that is unmovable...
- Solve all TODOs
- Change createVec3dArray and all similar functions to use capital letter for type
- Align constants naming style and collect them in one place for c interface
- Rename everything with "element" to "view", e.g. setCurrentElement -> setCurrentView, because "element" was chosen when other types of gui elements were considered, thus the general name. Check if setting current gui element is needed for other gui element types (button, text field, drop down), might not be necessary since all information can be passed in one function call, thus no need to set state
- If setCurrentElement -> setCurrentView, view -> setViewAngles/viewAngles
- Adding another .c file using the c interface creates linker error for duplicated functions -> make inline
- Make sure APPENDABLE is working for scatter, scatter3, plot, plot3
- Move "FAST_PLOT" flag to "not_ready" namespace?

Post release:
- Begin able to set window and element size and position from interface
- When changing project file, all elements probably don't get updated in the main window version of the element handles
- Replace "OptionalParameter" with std::optional
- Check what happens when plotting multiple 2D things sequentially, do they overlap properly?
- Add protection from "NaN" of axes calculation
- Plot pane width scaling for line width and point size, so that larger and smaller sizes can be acheived than default
- Finish point selector, specifically all different type's selector functions
- Zoom with rect only if certain button is pressed
- Fix platform macros (PLATFORM_APPLE_M etc) needing separate #ifdef statements
- No saved file name shall be showed in title bar when no file is loaded
- Data cursor, cursor to click on data to get xyz value
- Finalize grid numbers placement when snapped
- Making sure that view and axes are set properly when not explicitly setting them
  - Behaviour when plotting when no configuration is set
- Color shall be set using floats in range [0, 1], but still transmitted as uint8_t [0, 255]
- Test sequence function from C/C++ interfaces, that can be executed to check that encoding is correct
- plot2 with fill under/over x axis
- candlestick/errorbar
- Contour plotting function
- Bar plot
- 2D plot with upper and lower interval (demo only?)
- Colorbar
- Add scaling, min max to sliders (so instead of going from 4, to 105, it could go from 0.3 to 14.2)
- Time date axes
- Should be possible to set layout to "relative" or "absolute" for elements
- Python gui api
- Move as much as possible from plot_pane into axes_interactor
- Create "super struct" that contains all necessary information from axes_interactor that gets passed into axes_renderer
- For FeatureSet, don't have ItemId as a specific argument pos, just put in support for the argument parser
  to populate it or property from the variadic templ. args
- In C interface, have all properties functions return
  "Property" or "PropertyObject" or something, which can then be converted to CommunicationHeaderObject
- Maybe PropertyType could be removed from each property, and instead use a templated function to return correct property type? And property type does not need to be transmitted, since that information is already in the look up table
- Refactor legend properties
- Create layout grids
- wxWidgets objects should have a "GetParent" method. Use this instead of saving the parent in a pointer
- Global args functions which is accessible from everywhere, getArg("sample_length").as<std::uint32_t>() for example. Passed in like "./some/path/to/app --other-arg apa --some-arg bepa --sample_length 100". Positional args does not lead with "--", and are accessed with getArg(0).as<std::string>() for example. Shortened args are accessed with getArg("s").as<std::string>() for example, and are passed in like "./some/path/to/app -s 100"
- "Tuner gui" - a small gui app where one can add controls whose values can be queried over TCP, if you're tuning something in real time for example.
- For 2D functions (plot, scatter etc.), implement rolling z-offset, so that one can plot multiple things on top of each other
- Rename: 
  PlotObjectAttributes -> PlotDataAttributes
  PropertiesData -> PlotDataUserProperties
                    UserSuppliedPlotDataProperties
                    UserSuppliedPlotProperties
                    UserSuppliedProperties
- PropertiesData -> ParsedProperties
- Change all reinterpret_cast to static_cast<whatever>(static_cast<void*>()) (might be allowed?)
- Remove the need to always send "NUM_ELEMENTS" if it's not needed for the function
- Remove unecessary asserts in the receiving end
- Split CommunicationHeader into send and receive comm. header classes?
- Drop shadow and bevel of plot pane
- Pro version of dvs including buttons?
- "Hole" in background canvas for grouping elements, should have a title
- Get user mouse input from plot back to user application
- Drawing annotations in image (2D/3D bounding boxes, semantic pixel labeling)
- Selecable points in scatter plot, which can then be queried from client application, to get points and
indices. Selected points shall be highlighted in plot
- New application that loads dynamic library (like the newer app) that plots real time data (like main_application),
  not using TCP IPC, but just sending the data within the application, so that one can design their own real time
  data viewer application gui
- Make all plot objects updatable with a flag "UPDATABLE", so that new data can be submitted to the same object without new allocation
- Reducing number of axis numbers depending on rotation
- Move "modifyShader" stuff to "preRender"?
- Remove passing the hdr to all PlotObjects, it can be easily retreived from ReceivedData
- Make sure all dynamic data is released in plot objects
- Delete gl buffers with "glDeleteBuffers"
- Release all textures, VBOs/VAOs in plot objects
- Refactor/clean up window/tabs/plot elements system
- Remove constexpr and constants from headers that doesn't need to be in the header
- Zoom from/to point where mouse is when it clicked
- Make queues of received data instead, and put ConvertedData as a member of received data? Rename ReceivedData to InputData
- Don't execute pending clear on interaction (with mouse), it makes plots flashing when using waitForFlush, and drawing multiple things (probably)
- Set color in fragment shader with uniform, instead of in vertex shader
- Investigate if main_window can be just a wxObject or something
- Rename properties to attributes, and merge into normal header objects?
 * Rename "normal" header objects to FunctionAttributes, and properties to UserAttributes?
- Instancing for drawMesh
- Make all properties constexpr?
- Merge plot2D/plot3Ds shaders (and possibly even C++ classes?)
- Separate plot object vectors so that shader switching is minimized
- Change VertexBuffer to take the primitive only to "render", and not to constructor
- Time date axis
- Merge fastPlot and lineCollection, with switching of GLenum
- Replace use of dynamic matrices/vector with MatrixFixed/VectorFixed with templated size, since most uses can be static (in dvs gui)
- Mark all properties classes constructors noexcept?
- Change void drawPlaneXY etc. interfaces to match between languages (C implementation is correct)
- "Arrow edge" size gets bigger with longer arrows, show shouldn't be the case
- Make proper test folder structure
- Receive and push new data until there is new data available, and refresh only after last update
- Remove need to always specify num_elements
- Add MatrixFixed and VectorFixed
 * Finalize MatrixFixed functions
 * Use MatrixFixed instead of Matrix where possible
 * Add VectorFixed
- Use weak_ptr for current_gui_element_?
- Image view (same level as plot pane) which is zoomable and panable only
- Investigate why axes_limits_ is half of what the axes show (probably due to doubling the values in generateGridVectors)
- Do something better/neater than "fillBufferWithData"?
- Change to google logging
- Notify client application when a gui element has been deleted, so calling the GuiElementHandle will give an error message
- Generic "buffer" class that can be used to send Line3D, Triangles, etc.
- Don't always update on keypress?
- What to do if two adjecent points are at the same pos for plot/plot3
- Plot functions with VectorView and MatrixView
- Replace old c type arrays with std::array
- Real time plot with option to add new samples
 * And extended functionality to add multiple slots in same function call
- Change opengl types from float to double, to increase precision
  - https://stackoverflow.com/questions/28014864/why-do-different-variations-of-glvertexattribpointer-exist
  - https://stackoverflow.com/questions/62292163/opengl-pass-integer-array-with-gl-array-buffer
- Fix showing correct plot walls when in perspective mode
- Default layout templates with simple names and ex 2x2 plots, 3x3 plots etc
- Create data structure to store properties in, instead of having to specify everything in function call to "plot" etc. i.e. "plot(x, y, props)"
- setCurrentElement doesn''t send any information to dvs, only sets internal variable on client side which is sent with the next command
  - This way, a property type could be added, so that the current element can be specified in the function call
- Create another class called something like HeaderPayload, that separates values (angle, axis bounds etc) from flags?
- Logarithmic axes xyz
- Check if "fillBuffer(&(data_blob[idx]), other_elements...);" can be used as "fillBuffer(&(data_blob[idx]), first_element, other_elements...);"
- MatrixBase and VectorBase to have all operations, and own T* data, size, num_rows, num_cols
- Unify some compatible shaders to one big shader with switch case
- Edge and Facecolor transparent
- Fix so that one can set axis square and axis equal
- Nice looking buttons in interface
- quiver3
- Ability to set FOV
- Show plot walls differently if perspective projection
- Programatically specify plots in different windows
- Command line window that outputs errors and warnings
 - Possibility to manipulate plots and windows using this command line interface
- Characters turning away from plot box when rotating
- 3D world
- http://www.opengl.org/wiki/Buffer_Object_Streaming
- Dashed line for plot and plot3
- Change all relevant functions to accept "View" types
- Implement findMinMax for matrices and vectors
- Command line window that prints errors etc.
- Set order in which different types are plotted
- Be able to select plot object and pan it around (and rotate and zoom?)
- Be able to draw lines and rectangles in plot, with mouse movement
- Be able to specify which callback type one wants for a gui element (ButtonPressed, ButtonReleased, SliderDragged, SliderReleased etc.)
